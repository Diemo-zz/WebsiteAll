version: "3.3"
services:
  proxy:
    image: traefik:v2.2
    ports:
    - 80:80
    - 443:443
    networks:
      - traefik-public
      - default
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - traefik-public-certificates:/certificates
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label for this stack
      # from the env var TRAEFIK_TAG
      - --providers.docker.constraints=Label(`traefik.constraint-label-stack`, `diarmaiddeburca-de`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Enable Docker Swarm mode
      - --providers.docker.swarmmode
      - --entrypoints.http.address=:80
      - --entrypoints.https.address=:443
      - --certificatesresolvers.le.acme.email=diarmaiddeburca@gmail.com
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      - --certificatesresolvers.le.acme.tlschallenge=true
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true
        # Use the traefik-public network (declared below)
        - traefik.docker.network=trafik-public
        # Use the custom label "traefik.constraint-label=traefik-public"
        # This public Traefik will only use services with this label
        - traefik.constraint-label=traefik-public
        # traefik-http set up only to use the middleware to redirect to https
        - traefik.http.middlewares.diarmaiddeburca-https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.diarmaiddeburca-https-redirect.redirectscheme.permanent=true
        # Handle host with and without "www" to redirect to only one of them
        # Uses environment variable DOMAIN
        # To disable www redirection remove the Host() you want to discard, here and
        # below for HTTPS
        - traefik.http.routers.${STACK_NAME?Variablasaet{STACK_NAME?Variable not set}-proxy-http.entrypoints=http
        # traefik-https the actual router using HTTPS
        - traefik.http.routers.diarmaiddeburca-proxy-https.rule=Host(`diarmaiddeburca.de`) || Host(`www.diarmaiddeburca.de`)
        - traefik.http.routers.diarmaiddeburca-proxy-https.entrypoints=https
        - traefik.http.routers.diarmaiddeburca-proxy-https.tls=true
        # Use the "le" (Let's Encrypt) resolver created below
        - traefik.http.routers.diarmaiddeburca-proxy-https.tls.certresolver=le
        # Define the port inside of the Docker service to use
        - traefik.http.services.diarmaiddeburca-proxy.loadbalancer.server.port=80
        # Handle domain with and without "www" to redirect to only one
        # To disable www redirection remove the next line
        - traefik.http.middlewares.diarmaiddeburca-www-redirect.redirectregex.regex=^https?://(www.)?(diarmaiddeburca.de)/(.*)
        # Redirect a domain with www to non-www
        # To disable it remove the next line
        - traefik.http.middlewares.diarmaiddeburca-www-redirect.redirectregex.replacement=https://diarmaiddeburca.de/$${3}
        # Redirect a domain without www to www
        # To enable it remove the previous line and uncomment the next
        # - traefik.http.middlewares.${STACK_NAME}-www-redirect.redirectregex.replacement=https://www.${DOMAIN}/$${3}
        # Middleware to redirect www, to disable it remove the next line 
        - traefik.http.routers.diarmaiddeburca-proxy-https.middlewares=diarmaiddeburca-www-redirect
        # Middleware to redirect www, and redirect HTTP to HTTPS
        # to disable www redirection remove the section: diarmaiddeburca-www-redirect,
        - traefik.http.routers.diarmaiddeburca-proxy-http.middlewares=diarmaiddeburca-www-redirect,diarmaiddeburca-https-redirect

  run_fortran:
    image: diarmaid-fortran
    build:
      context: ./FortranCompiler
      dockerfile: ./Dockerfile
    deploy:
      labels:
        - traefik.enable=true
        - traefik.constraint-label-stack=diarmaiddeburca-de
        - traefik.docker.network=traefik-public
        - traefik.http.routers.diarmaiddeburca-fortran-http.rule=Host(`fortran.diarmaiddeburca.de`)
        - traefik.http.routers.diarmaiddeburca-fortran-http.entrypoints=http
        - traefik.http.routers.diarmaiddeburca-fortran-http.middlewares=https-redirect
        - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
        - traefik.http.routers.diarmaiddeburca-fortran-https.rule=Host(`fortran.diarmaiddeburca.de`)
        - traefik.http.routers.diarmaiddeburca-fortran-https.entrypoints=https
        - traefik.http.routers.diarmaiddeburca-fortran-https.tls=true
        - traefik.http.routers.diarmaiddeburca-fortran-https.tls.certresolver=le
        - traefik.http.services.diarmaiddeburca-fortran-fortran-https.loadbalancer.server.port=80
    networks:
      - traefik-public

networks:
  traefik-public:
    # Allow setting it to false for testing
    external: ${TRAEFIK_PUBLIC_NETWORK_IS_EXTERNAL-true}

volumes:
  traefik-public-certificate: